ExR1: Nós estamos criando um ponteiro, alocamos 5 espaços de memória e apontamos nosso poteiro para a primeira posição do array;
ExR2: O programa imprime a primeira posição do array, logo imprime o endereço da primeira posição do array "reiniciado";

ExR3: O programa começa a ser executado no método main.

A variável x é declarada e inicializada com o valor 5. O espaço na memória é alocado para armazenar esse valor.

A função escrever é chamada para imprimir o valor de x, que é 5.

A função passagemDeTipoPrimitivo é chamada com o valor de x como argumento.

O valor de x é passado para o parâmetro a da função passagemDeTipoPrimitivo.

A função escrever é chamada novamente para imprimir o valor de a, que é 5.

O valor de a é alterado para 10.

A função escrever é chamada novamente para imprimir o valor de a, que agora é 10.

A execução volta para o método main.

A função escrever é chamada mais uma vez para imprimir o valor de x, que ainda é 5;

ExR4:
Memória
Y: 7Eh
X
0
1
2
3
4
X
X
0
5
10
15
20
b: 77h
75h
76h
77h
78h
79h
7Ah
7Bh
7Ch
7Dh
7Eh
7Fh
80h
81h
82h
83h
Tela
y[0] : 0
y[1] : 5
y[2] : 10
y[3] : 15
y[4] : 20

Ex1: Cliente c significa criar uma variável c do tipo cliente;
c = new Cliente() significa criar um objeto Cliente na memória e faz com que a variável c aponte para essa instância criada;
Cliente c = new Cliente() é a junção das duas acima, é a declaração da variável c do tipo cliente, e a inicialização da mesma, criando um novo objeto;

ExR4:
Tela
ADDRs:
c1(null)
c2(null)
c3(null)
ADDRs:
c1(7Ah)
c2(7Ah)
c3(A5h)
ATRIBUTOs
c1(3/aa)
c2(3/aa)
c3(2/bb)

ExR5:
 c1  33h
 c2  33h
 c3   33h
6 / ff  33h
2 / bb
5 / ee
62h
33h

ExR6:
Para que c2 aponte para um objeto diferente, mas com os mesmos atributos de c1, você pode criar um novo objeto Cliente e copiar os valores dos atributos do objeto apontado por c1.


ExR8:
class Ponteiro04Objeto {
 public static void main (String[] args){
 Cliente c1 = null, c2 = null, c3 = null;
 escrever("ADDRs:\nc1(" + c1 + ")\nc2(" + c2 + ")\nc3(" + c3 + ")");
 c1 = new Cliente(1, "aa"); c2 = c1; c3 = new Cliente(2, "bb");
 escrever("ADDRs:\nc1(" + c1 + ")\nc2(" + c2 + ")\nc3(" + c3 + ")");
 c2.setCodigo(3);
 escrever(“ATRIBUTOs:”);
 escrever(“c1(” + c1.getCodigo() + “ / ” + c1.getNome() + “)”);
 escrever(“c2(” + c2.getCodigo() + “ / ” + c2.getNome() + “)”);
 escrever(“c3(” + c3.getCodigo() + “ / ” + c3.getNome() + “)”);
} }


Ex2:

Cliente c1 = new Cliente(1, "aa");

Um novo objeto Cliente é criado com código 1 e nome "aa".
A variável c1 passa a apontar para esse novo objeto.
Cliente vet[] = new Cliente[5];

Um array de referências para objetos Cliente é criado, com tamanho 5.
sop(c1 + "/" + c1.getCodigo() + "/" + c1.getNome());

A função sop (provavelmente uma função personalizada para impressão) é chamada para imprimir as informações do objeto c1.
Loop for:

O loop percorre o array vet.
Para cada iteração:
vet[i] = c1.clone(); cria um novo objeto Cliente através do método clone e atribui a referência desse novo objeto à posição i do array vet.
Dentro do loop:

System.out.println(vet[i] + "/" + vet[i].getCodigo() + "/" + vet[i].getNome()); imprime as informações do objeto na posição i do array vet.

ExR9:

B) Escreve na tela "Diferentes";

ExR10:
A) I e II;

